# Clean and extract party and province. These are regular expressions and it's fine if it's not clear. Regular expression extract/replace data based on patterns.
# If you are curious, take a look at this:
# https://jfjelstul.github.io/regular-expressions-tutorial/
Parliamentarians <- mutate(Parliamentarians,party=trimws(str_extract(`Political Affiliation`, "[^\\()]+")))
Parliamentarians <- mutate(Parliamentarians,province=str_extract(`Province/Territory`, "[^\\\r]+"))
# Change format of date to date format
Parliamentarians <- mutate(Parliamentarians,date_ended=ymd(Parliamentarians$date_ended,quiet = TRUE))
# If no end date, Parliamentarian is still in HoC so put today as end date.
# If you are very curious, look up difference between ifelse() and if_else()
Parliamentarians <- mutate(Parliamentarians,date_ended=if_else(is.na(date_ended),ymd(today()),date_ended))
# Keep only those parties, let's not keep the small parties / indps
names_keep <- c("Conservative", "Conservative Party of Canada", "Liberal Party of Canada",
"New Democratic Party", "Progressive Conservative Party")
Parliamentarians <- filter(Parliamentarians, party %in% names_keep)
# Keep only variables we need
Parliamentarians <- select(Parliamentarians, Name,Gender,party,date_started,date_ended,province)
# Delete rows where missing values
Parliamentarians <- na.omit(Parliamentarians)
Parliamentarians
Parliamentarians %>% sample_n(100)
Parliamentarians %>% sample_n(100)
set.seed(232)
Parliamentarians %>% sample_n(100)
set.seed(232)
Parliamentarians %>% sample_n(100)
Parliamentarians %>% sample_n(100) %>% mutate(as.numeric(year(date_started)))
Parliamentarians %>% sample_n(100) %>% mutate(year_started=as.numeric(year(date_started)))
Parliamentarians %>% sample_n(100) %>% mutate(year_started=as.numeric(year(date_started))) %>%
select(-date_started,-date_ended)
set.seed(232)
Parliamentarians %>% sample_n(100) %>% mutate(year_started=as.numeric(year(date_started))) %>%
select(-date_started,-date_ended)
set.seed(232)
Parliamentarians %>% sample_n(100) %>% mutate(year_started=as.numeric(year(date_started))) %>%
select(-date_started,-date_ended) %>% write_csv("~/Documents/personal_repos/personal_website/pubpol750-2022/Homework1/Parliamentarians_subset100.csv")
read_csv("~/Documents/personal_repos/personal_website/pubpol750-2022/Homework1/Parliamentarians_subset100.csv")
read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/Parliamentarians_subset100.csv")
library(tidyverse)
df <- read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/Parliamentarians_subset100.csv")
df
df <- read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/Parliamentarians_subset100.csv")
df
table(df$Gender)
table(df$Gender,df$party)
to_plot <- df %>%
group_by(Gender) %>%
count()
ggplot(to_plot,aes(x=Gender)) +
geom_bar(stat='identity')
ggplot(to_plot,aes(x=Gendery=n)) +
geom_bar(stat='identity')
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat='identity')
df <- read_csv("/Users/justinsavoie/Documents/personal_repos/personal_website/pubpol750-2022/Homework1/Parliamentarians_subset100.csv")
# On Windows
df <- read_csv("C:\\Users\\justinsavoie\\Downloads\\Parliamentarians_subset100.csv")
library(tidyverse)
# Different ways to read in data. All results in the same thing: reading the csv file.
df <- read_csv("/Users/justinsavoie/Documents/personal_repos/personal_website/pubpol750-2022/Homework1/Parliamentarians_subset100.csv")
df <- read_csv("~/Documents/personal_repos/personal_website/pubpol750-2022/Homework1/Parliamentarians_subset100.csv")
df <- read_csv("~/Downloads/Parliamentarians_subset100.csv")
df <- read_csv("/Users/justinsavoie/Downloads/Parliamentarians_subset100.csv")
df <- read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/Parliamentarians_subset100.csv")
# On Windows
df <- read_csv("C:\\Users\\justinsavoie\\Downloads\\Parliamentarians_subset100.csv")
View(df)
summary(df$year_started,useNA = "always")
summary(df$year_started)
# Quick check on all frequencies
table(df$Gender)
table(df$Gender,useNA = "always")
table(df$party,useNA = "always")
table(df$province,useNA = "always")
summary(df$year_started)
ggplot(df,aes(x=Gender)) +
geom_bar()
df_grouped <- group_by(df,Gender)
df_grouped <- group_by(df,Gender)
count(df_grouped)
to_plot <- count(df_grouped)
to_plot
summarise(df_grouped,n=n())
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat = "identity")
################################################################################
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
################################################################################
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
Parliamentarians <- mutate(Parliamentarians,party=recode(party,!!!c("Conservative Party of Canada"="Conservative",
"Progressive Conservative Party"="Conservative")))
################################################################################
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
df <- mutate(df,party=recode(party,!!!c("Conservative Party of Canada"="Conservative",
"Progressive Conservative Party"="Conservative")))
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
df
df %>%
group_by(Gender,party)
df %>%
group_by(Gender,party) %>%
count()
to_plot <- df %>%
group_by(Gender,party) %>%
count()
ggplot(df,aes(x=Gender,y=n)) +
geom_bar(stat='identity') + facet_grid(cols=vars(party))
ggplot(df,aes(x=Gender,y=n)) +
geom_bar(stat='identity')
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat='identity') + facet_grid(cols=vars(party))
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","red","orange"))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","red","orange")) +
labs(fill="")
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","red","orange")) +
theme(legend.position = "none")
library(readxl)
library(tidyverse)
library(lubridate)
Parliamentarians <- read_excel("~/Downloads/Parliamentarians.xlsx")
# filter by whether "MP" is in the variable `Type of Parliamentarian`
Parliamentarians <- filter(Parliamentarians,str_detect(`Type of Parliamentarian`,"MP"))
# create (mutate) variables for start and end date of the parliamentarian
# str_sub(x,5,14) returns the values between positions 5 and 14
# e.g. str_sub("abcdefghytr56",3,10) returns "cdefghyt"
# yms() coerces dates-as-string to date format
Parliamentarians <- mutate(Parliamentarians,date_started=ymd(str_sub(`Type of Parliamentarian`,5,14)))
Parliamentarians <- mutate(Parliamentarians,date_ended=str_sub(`Type of Parliamentarian`,18,27))
# Clean and extract party and province. These are regular expressions and it's fine if it's not clear. Regular expression extract/replace data based on patterns.
# If you are curious, take a look at this:
# https://jfjelstul.github.io/regular-expressions-tutorial/
Parliamentarians <- mutate(Parliamentarians,party=trimws(str_extract(`Political Affiliation`, "[^\\()]+")))
Parliamentarians <- mutate(Parliamentarians,province=str_extract(`Province/Territory`, "[^\\\r]+"))
# Change format of date to date format
Parliamentarians <- mutate(Parliamentarians,date_ended=ymd(Parliamentarians$date_ended,quiet = TRUE))
# If no end date, Parliamentarian is still in HoC so put today as end date.
# If you are very curious, look up difference between ifelse() and if_else()
Parliamentarians <- mutate(Parliamentarians,date_ended=if_else(is.na(date_ended),ymd(today()),date_ended))
# Keep only those parties, let's not keep the small parties / indps
names_keep <- c("Conservative", "Conservative Party of Canada", "Liberal Party of Canada",
"New Democratic Party", "Progressive Conservative Party")
Parliamentarians <- filter(Parliamentarians, party %in% names_keep)
# Keep only variables we need
Parliamentarians <- select(Parliamentarians, Name,Gender,party,date_started,date_ended,province)
# Delete rows where missing values
Parliamentarians <- na.omit(Parliamentarians)
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar()
Parliamentarians_grouped <- group_by(Parliamentarians,Gender)
to_plot <- summarise(Parliamentarians_grouped,count=n())
ggplot(to_plot,aes(x=Gender,y=count)) +
geom_bar(stat='identity')
Parliamentarians <- mutate(Parliamentarians,year=year(date_started))
Parliamentarians <- mutate(Parliamentarians,year_period=cut(year,c(1860,1900,1950,2000,2025),dig.lab = 4))
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar() +
facet_wrap(~year_period) +
scale_y_continuous(limits=c(0,1300))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
Parliamentarians <- mutate(Parliamentarians,party=recode(party,!!!c("Conservative Party of Canada"="Conservative",
"Progressive Conservative Party"="Conservative")))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
Parliamentarians %>%
group_by(Gender,party,year_period) %>%
count()
to_plot <- Parliamentarians %>%
group_by(Gender,party,year_period) %>%
count()
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat = 'identity') +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
Parliamentarians %>%
mutate(year_in_office=year(date_ended)-year(date_started))
Parliamentarians <- Parliamentarians %>%
mutate(year_in_office=year(date_ended)-year(date_started))
ggplot() +
geom_density(x=year_in_office)
ggplot() +
geom_density(Parliamentarians,x=year_in_office)
ggplot() +
geom_density(Parliamentarians,aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians,aes(x=year_in_office))
Parliamentarians
Parliamentarians %>% arrange(desc(year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix')) +
geom_density(aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,stat = 'identity')
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,position = 'fill')
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,adjust=2)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,position = "stack")
Parliamentarians
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,position = "stack")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stack")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stacked")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stack")
Parliamentarians
Parliamentarians
Parliamentarians %>%
filter(year_period!="(2000,2025]")
Parliamentarians <- Parliamentarians %>%
filter(year_period!="(2000,2025]")
ggplot() +
geom_density(data=Parliamentarians,aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stack")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.8)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.6)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office)) +
facet_wrap(~Gender)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.6)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office)) +
facet_wrap(~Gender)
Parliamentarians
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office),fill=party) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_histogram(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_histogram(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender)) +
scale_fill_manual(values=c("darkblue","red","orange"))
library(readxl)
library(tidyverse)
library(lubridate)
Parliamentarians <- read_excel("~/Downloads/Parliamentarians.xlsx")
# filter by whether "MP" is in the variable `Type of Parliamentarian`
Parliamentarians <- filter(Parliamentarians,str_detect(`Type of Parliamentarian`,"MP"))
# create (mutate) variables for start and end date of the parliamentarian
# str_sub(x,5,14) returns the values between positions 5 and 14
# e.g. str_sub("abcdefghytr56",3,10) returns "cdefghyt"
# yms() coerces dates-as-string to date format
Parliamentarians <- mutate(Parliamentarians,date_started=ymd(str_sub(`Type of Parliamentarian`,5,14)))
Parliamentarians <- mutate(Parliamentarians,date_ended=str_sub(`Type of Parliamentarian`,18,27))
# Clean and extract party and province. These are regular expressions and it's fine if it's not clear. Regular expression extract/replace data based on patterns.
# If you are curious, take a look at this:
# https://jfjelstul.github.io/regular-expressions-tutorial/
Parliamentarians <- mutate(Parliamentarians,party=trimws(str_extract(`Political Affiliation`, "[^\\()]+")))
Parliamentarians <- mutate(Parliamentarians,province=str_extract(`Province/Territory`, "[^\\\r]+"))
# Change format of date to date format
Parliamentarians <- mutate(Parliamentarians,date_ended=ymd(Parliamentarians$date_ended,quiet = TRUE))
# If no end date, Parliamentarian is still in HoC so put today as end date.
# If you are very curious, look up difference between ifelse() and if_else()
Parliamentarians <- mutate(Parliamentarians,date_ended=if_else(is.na(date_ended),ymd(today()),date_ended))
# Keep only those parties, let's not keep the small parties / indps
names_keep <- c("Conservative", "Conservative Party of Canada", "Liberal Party of Canada",
"New Democratic Party", "Progressive Conservative Party")
Parliamentarians <- filter(Parliamentarians, party %in% names_keep)
# Keep only variables we need
Parliamentarians <- select(Parliamentarians, Name,Gender,party,date_started,date_ended,province)
# Delete rows where missing values
Parliamentarians <- na.omit(Parliamentarians)
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar()
ggsave("~/Desktop/figure1.png")
Parliamentarians_grouped <- group_by(Parliamentarians,Gender)
to_plot <- summarise(Parliamentarians_grouped,count=n())
ggplot(to_plot,aes(x=Gender,y=count)) +
geom_bar(stat='identity')
ggsave("~/Desktop/figure2.png")
Parliamentarians <- mutate(Parliamentarians,year=year(date_started))
Parliamentarians <- mutate(Parliamentarians,year_period=cut(year,c(1860,1900,1950,2000,2025),dig.lab = 4))
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar() +
facet_wrap(~year_period) +
scale_y_continuous(limits=c(0,1300))
ggsave("~/Desktop/figure3.png")
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggsave("~/Desktop/figure4.png")
Parliamentarians <- mutate(Parliamentarians,party=recode(party,!!!c("Conservative Party of Canada"="Conservative",
"Progressive Conservative Party"="Conservative")))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
ggsave("~/Desktop/figure5.png")
to_plot <- Parliamentarians %>%
group_by(Gender,party,year_period) %>%
count()
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat = 'identity') +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
Parliamentarians <- Parliamentarians %>%
mutate(year_in_office=year(date_ended)-year(date_started))
Parliamentarians <- Parliamentarians %>%
filter(year_period!="(2000,2025]")
ggplot() +
geom_density(data=Parliamentarians,aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.6)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_histogram(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender)) +
scale_fill_manual(values=c("darkblue","red","orange"))
mtcars_grouped <- group_by(mtcars,cyl)
count(mtcars_grouped)
summarise(mtcars_grouped,n=n())
mtcars %>%
group_by(cyl) %>%
count()
my_vector <- c(1,2,3,4,8)
mean(my_vector)
my_vector %>%
mean()
dem_score <- read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/parliamentarians_sub.csv")
dem_score <- read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/Parliamentarians_subset100.csv")
Parliamentarians_subset100 <- read_csv("/Users/justinsavoie/Documents/personal_repos/personal_website/pubpol750-2022/Homework1/Parliamentarians_subset100.csv")
options(htmltools.dir.version = FALSE)
library(kableExtra)
library(tidyverse)
library(haven)
library(readstata13)
read_spss()
df <- read_stata("~/Downloads/dataverse_files_CES2021/2021 Canadian Election Study v1.0.dta")
library(haven)
library(tidyverse)
library(srvyr)
df <- read_stata("~/Downloads/dataverse_files_CES2021/2021 Canadian Election Study v1.0.dta")
View(df)
table1
table3
table3 |>
separate(rate, into = c("cases", "population"))
tibble(x = c(NA, "x.y", "x.z", "y.z"))
tibble(x = c(NA, "x.y", "x.z", "y.z"))  %>% separate(x, c("A", "B"))
table5
table5 |>
unite(new, century, year)
(stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
))
stocks |>
pivot_wider(names_from = year, values_from = return)
stocks |>
pivot_wider(
names_from = year,
values_from = return,
values_drop_na = TRUE)
stocks |>
pivot_wider(
names_from = year,
values_from = return
) |>
pivot_longer(
cols=c(`2015`,`2016`),
names_to='year',
values_to='return'
)
stocks |>
pivot_wider(
names_from = year,
values_from = return
) |>
pivot_longer(
cols=c(`2015`,`2016`),
names_to='year',
values_to='return',
values_drop_na = TRUE
)
(stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
))
stocks |>
pivot_wider(
names_from = year,
values_from = return)
stocks |>
pivot_wider(
names_from = year,
values_from = return
) |>
pivot_longer(
cols=c(`2015`,`2016`),
names_to='year',
values_to='return'
)
stocks |>
pivot_wider(
names_from = year,
values_from = return
) |>
pivot_longer(
cols=c(`2015`,`2016`),
names_to='year',
values_to='return',
values_drop_na = TRUE
)
?table1
