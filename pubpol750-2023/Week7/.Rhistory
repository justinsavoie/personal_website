theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
df <- mutate(df,party=recode(party,!!!c("Conservative Party of Canada"="Conservative",
"Progressive Conservative Party"="Conservative")))
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(df,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
df
df %>%
group_by(Gender,party)
df %>%
group_by(Gender,party) %>%
count()
to_plot <- df %>%
group_by(Gender,party) %>%
count()
ggplot(df,aes(x=Gender,y=n)) +
geom_bar(stat='identity') + facet_grid(cols=vars(party))
ggplot(df,aes(x=Gender,y=n)) +
geom_bar(stat='identity')
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat='identity') + facet_grid(cols=vars(party))
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(to_plot,aes(x=Gender,y=n)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","red","orange"))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","red","orange")) +
labs(fill="")
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat='identity') +
facet_grid(cols=vars(party)) +
scale_fill_manual(values=c("darkblue","red","orange")) +
theme(legend.position = "none")
library(readxl)
library(tidyverse)
library(lubridate)
Parliamentarians <- read_excel("~/Downloads/Parliamentarians.xlsx")
# filter by whether "MP" is in the variable `Type of Parliamentarian`
Parliamentarians <- filter(Parliamentarians,str_detect(`Type of Parliamentarian`,"MP"))
# create (mutate) variables for start and end date of the parliamentarian
# str_sub(x,5,14) returns the values between positions 5 and 14
# e.g. str_sub("abcdefghytr56",3,10) returns "cdefghyt"
# yms() coerces dates-as-string to date format
Parliamentarians <- mutate(Parliamentarians,date_started=ymd(str_sub(`Type of Parliamentarian`,5,14)))
Parliamentarians <- mutate(Parliamentarians,date_ended=str_sub(`Type of Parliamentarian`,18,27))
# Clean and extract party and province. These are regular expressions and it's fine if it's not clear. Regular expression extract/replace data based on patterns.
# If you are curious, take a look at this:
# https://jfjelstul.github.io/regular-expressions-tutorial/
Parliamentarians <- mutate(Parliamentarians,party=trimws(str_extract(`Political Affiliation`, "[^\\()]+")))
Parliamentarians <- mutate(Parliamentarians,province=str_extract(`Province/Territory`, "[^\\\r]+"))
# Change format of date to date format
Parliamentarians <- mutate(Parliamentarians,date_ended=ymd(Parliamentarians$date_ended,quiet = TRUE))
# If no end date, Parliamentarian is still in HoC so put today as end date.
# If you are very curious, look up difference between ifelse() and if_else()
Parliamentarians <- mutate(Parliamentarians,date_ended=if_else(is.na(date_ended),ymd(today()),date_ended))
# Keep only those parties, let's not keep the small parties / indps
names_keep <- c("Conservative", "Conservative Party of Canada", "Liberal Party of Canada",
"New Democratic Party", "Progressive Conservative Party")
Parliamentarians <- filter(Parliamentarians, party %in% names_keep)
# Keep only variables we need
Parliamentarians <- select(Parliamentarians, Name,Gender,party,date_started,date_ended,province)
# Delete rows where missing values
Parliamentarians <- na.omit(Parliamentarians)
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar()
Parliamentarians_grouped <- group_by(Parliamentarians,Gender)
to_plot <- summarise(Parliamentarians_grouped,count=n())
ggplot(to_plot,aes(x=Gender,y=count)) +
geom_bar(stat='identity')
Parliamentarians <- mutate(Parliamentarians,year=year(date_started))
Parliamentarians <- mutate(Parliamentarians,year_period=cut(year,c(1860,1900,1950,2000,2025),dig.lab = 4))
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar() +
facet_wrap(~year_period) +
scale_y_continuous(limits=c(0,1300))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
Parliamentarians <- mutate(Parliamentarians,party=recode(party,!!!c("Conservative Party of Canada"="Conservative",
"Progressive Conservative Party"="Conservative")))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
Parliamentarians %>%
group_by(Gender,party,year_period) %>%
count()
to_plot <- Parliamentarians %>%
group_by(Gender,party,year_period) %>%
count()
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat = 'identity') +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
Parliamentarians %>%
mutate(year_in_office=year(date_ended)-year(date_started))
Parliamentarians <- Parliamentarians %>%
mutate(year_in_office=year(date_ended)-year(date_started))
ggplot() +
geom_density(x=year_in_office)
ggplot() +
geom_density(Parliamentarians,x=year_in_office)
ggplot() +
geom_density(Parliamentarians,aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians,aes(x=year_in_office))
Parliamentarians
Parliamentarians %>% arrange(desc(year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix')) +
geom_density(aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,stat = 'identity')
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,position = 'fill')
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,adjust=2)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,position = "stack")
Parliamentarians
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.7,position = "stack")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stack")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stacked")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stack")
Parliamentarians
Parliamentarians
Parliamentarians %>%
filter(year_period!="(2000,2025]")
Parliamentarians <- Parliamentarians %>%
filter(year_period!="(2000,2025]")
ggplot() +
geom_density(data=Parliamentarians,aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),position = "stack")
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.8)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.6)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office)) +
facet_wrap(~Gender)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.6)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office)) +
facet_wrap(~Gender)
Parliamentarians
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office),fill=party) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_histogram(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_histogram(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender)) +
scale_fill_manual(values=c("darkblue","red","orange"))
library(readxl)
library(tidyverse)
library(lubridate)
Parliamentarians <- read_excel("~/Downloads/Parliamentarians.xlsx")
# filter by whether "MP" is in the variable `Type of Parliamentarian`
Parliamentarians <- filter(Parliamentarians,str_detect(`Type of Parliamentarian`,"MP"))
# create (mutate) variables for start and end date of the parliamentarian
# str_sub(x,5,14) returns the values between positions 5 and 14
# e.g. str_sub("abcdefghytr56",3,10) returns "cdefghyt"
# yms() coerces dates-as-string to date format
Parliamentarians <- mutate(Parliamentarians,date_started=ymd(str_sub(`Type of Parliamentarian`,5,14)))
Parliamentarians <- mutate(Parliamentarians,date_ended=str_sub(`Type of Parliamentarian`,18,27))
# Clean and extract party and province. These are regular expressions and it's fine if it's not clear. Regular expression extract/replace data based on patterns.
# If you are curious, take a look at this:
# https://jfjelstul.github.io/regular-expressions-tutorial/
Parliamentarians <- mutate(Parliamentarians,party=trimws(str_extract(`Political Affiliation`, "[^\\()]+")))
Parliamentarians <- mutate(Parliamentarians,province=str_extract(`Province/Territory`, "[^\\\r]+"))
# Change format of date to date format
Parliamentarians <- mutate(Parliamentarians,date_ended=ymd(Parliamentarians$date_ended,quiet = TRUE))
# If no end date, Parliamentarian is still in HoC so put today as end date.
# If you are very curious, look up difference between ifelse() and if_else()
Parliamentarians <- mutate(Parliamentarians,date_ended=if_else(is.na(date_ended),ymd(today()),date_ended))
# Keep only those parties, let's not keep the small parties / indps
names_keep <- c("Conservative", "Conservative Party of Canada", "Liberal Party of Canada",
"New Democratic Party", "Progressive Conservative Party")
Parliamentarians <- filter(Parliamentarians, party %in% names_keep)
# Keep only variables we need
Parliamentarians <- select(Parliamentarians, Name,Gender,party,date_started,date_ended,province)
# Delete rows where missing values
Parliamentarians <- na.omit(Parliamentarians)
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar()
ggsave("~/Desktop/figure1.png")
Parliamentarians_grouped <- group_by(Parliamentarians,Gender)
to_plot <- summarise(Parliamentarians_grouped,count=n())
ggplot(to_plot,aes(x=Gender,y=count)) +
geom_bar(stat='identity')
ggsave("~/Desktop/figure2.png")
Parliamentarians <- mutate(Parliamentarians,year=year(date_started))
Parliamentarians <- mutate(Parliamentarians,year_period=cut(year,c(1860,1900,1950,2000,2025),dig.lab = 4))
ggplot(Parliamentarians,aes(x=Gender)) +
geom_bar() +
facet_wrap(~year_period) +
scale_y_continuous(limits=c(0,1300))
ggsave("~/Desktop/figure3.png")
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","darkblue","red","orange","darkblue"))
ggsave("~/Desktop/figure4.png")
Parliamentarians <- mutate(Parliamentarians,party=recode(party,!!!c("Conservative Party of Canada"="Conservative",
"Progressive Conservative Party"="Conservative")))
ggplot(Parliamentarians,aes(x=Gender,fill=party)) +
geom_bar() +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
ggsave("~/Desktop/figure5.png")
to_plot <- Parliamentarians %>%
group_by(Gender,party,year_period) %>%
count()
ggplot(to_plot,aes(x=Gender,y=n,fill=party)) +
geom_bar(stat = 'identity') +
facet_grid(cols=vars(party),rows=vars(year_period)) +
theme(legend.position = "none") +
scale_fill_manual(values=c("darkblue","red","orange"))
Parliamentarians <- Parliamentarians %>%
mutate(year_in_office=year(date_ended)-year(date_started))
Parliamentarians <- Parliamentarians %>%
filter(year_period!="(2000,2025]")
ggplot() +
geom_density(data=Parliamentarians,aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office))
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=Gender),alpha=0.6)
ggplot() +
geom_density(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender))
ggplot() +
geom_histogram(data=Parliamentarians%>%filter(Name!='Brecken, Frederick de St Croix'),aes(x=year_in_office,fill=party)) +
facet_grid(cols=vars(party),rows=vars(Gender)) +
scale_fill_manual(values=c("darkblue","red","orange"))
mtcars_grouped <- group_by(mtcars,cyl)
count(mtcars_grouped)
summarise(mtcars_grouped,n=n())
mtcars %>%
group_by(cyl) %>%
count()
my_vector <- c(1,2,3,4,8)
mean(my_vector)
my_vector %>%
mean()
dem_score <- read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/parliamentarians_sub.csv")
dem_score <- read_csv("https://www.justinsavoie.com/pubpol750-2022/homework1/Parliamentarians_subset100.csv")
Parliamentarians_subset100 <- read_csv("/Users/justinsavoie/Documents/personal_repos/personal_website/pubpol750-2022/Homework1/Parliamentarians_subset100.csv")
options(htmltools.dir.version = FALSE)
library(kableExtra)
library(tidyverse)
library(haven)
library(readstata13)
read_spss()
?factor
1+4i
(1+4i)*i
(1+4i)*1i
?raw
library(tidyverse)
flights
library(nycflights13)
flights
class(flights)
str(flights)
str(1.342)
str(1)
str(int(1))
str(as.int(1))
as.integer(1)
str(as.integer(1))
str(mtcars)
mpg$cyl
options(htmltools.dir.version = FALSE)
library(kableExtra)
library(tidyverse)
mtcars$cyl
(df <- tibble(x=c(1,2,3),y=c("a","b","c")))
mtcars
factor(mtcars$cyl)
factor(mtcars$cyl) + 1
as.character(mtcars$cyl)*2
diamonds
diamonds %>% group_by(cut) %>% count()
diamonds %>% summarise(min(carat))
diamonds %>% summarise(min=min(carat),max=max(carat),median=median(carat))
library(moments)
library(e1071)
diamonds %>%
summarise(kurtosis=kurtosis(carat))
library(e1071)
diamonds %>%
summarise(kurtosis=kurtosis(carat),
skewness=skewness(skewness))
diamonds %>%
summarise(kurtosis=kurtosis(carat),
skewness=skewness(carat))
rnorm(100)
skewness(rnorm(100))
plot(density(beta(1,1)))
plot(density(beta(100,1,1)))
plot(density(rbeta(100,1,1)))
plot(density(rbeta(100,1,10)))
skewness(rbeta(100,1,10))
skewness(rnorm(10000))
skewness(rbeta(10000,1,10))
plot(density(rnorm(1000,10,2)))
plot(density(rbeta(1000,10,2)))
plot(density(rbeta(1000,10,1)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds %>%
group_by(cut) %>% count()
plot(density(rbeta(1000,1,10)))
plot(density(rbeta(1000,3,3)))
plot(density(rbeta(1000,5,5)))
plot(density(rbeta(1000,2,2)))
plot(density(rbeta(1000,2,2)))
skewness(rbeta(1000,2,2))
kurtosis(rbeta(1000,2,2))
plot(density(rbeta(1000,1,10)))
plot(density(rnorm(1000,10,1)))
plot(density(rbeta(1000,1,10)))
plot(density(rbeta(1000,2,2)))
plot(density(rbeta(1000,2,8)))
plot(density(rbeta(1000,2,4)))
plot(density(rbeta(1000,2,4)))
skewness(rbeta(1000,2,4))
kurtosis(rbeta(1000,2,4))
plot(density(rnorm(1000,10,1)))
skewness(rnorm(1000,10,1))
kurtosis(rnorm(1000,10,1))
plot(density(rbeta(1000,1,10)))
plot(density(rbeta(1000,10,10)))
plot(density(rbeta(1000,1,1)))
plot(density(rbeta(1000,1,1)))
skewness(rbeta(1000,1,1))
kurtosis(rbeta(1000,1,1))
plot(density(rbeta(1000,0.1,0.1)))
plot(density(rbeta(1000,100,1)))
plot(density(rbeta(1000,100,100)))
skewness(rnorm(1000,1000,1))
kurtosis(rnorm(1000,1000,1))
plot(density(rnorm(1000,1000,1)))
plot(density(x = rexp(1000)))
plot(density(rexp(1000)))
kurtosis(rexp(1000)))
kurtosis(rexp(1000))
skewness(rexp(1000))
rexp(1000)
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(1000))
kurtosis(rexp(10000))
kurtosis(rexp(10000))
density(rexp(10000))
plot(density(rexp(10000)))
plot(density(rexp(10000)))
skewness(rexp(10000))
kurtosis(rexp(10000))
diamonds %>%
summarise(min=min(carat),
max=max(carat),
median=median(carat),
mean=median(carat),
sd=sd(carat))
diamonds %>%
summarise(min=min(carat),
max=max(carat),
median=median(carat),
mean=median(carat),
sd=sd(carat),
IQR=IQR(carat))
sd(c(0,1,2,0,0,1,0,2))
sd(c(3,9,0,0,1,6))
IQR(c(0,1,2,0,0,1,0,2))
IQR(c(3,9,0,0,1,6))
quantile(c(3,9,0,0,1,6),c(0.25,0.75))
sort(c(3,9,0,0,1,6))
quantile(c(3,9,0,0,1,6),c(0.25))
quantile(c(3,9,0,0,1,6),c(0.2))
?quantile
library(tidyverse)
# Generate Data
set.seed(1234)  # Setting seed for reproducibility
dates <- seq(as.Date("2023-01-01"), by = "day", length.out = 365)
# Generate pool attendance with a sine curve + noise
pool_attendance <- round(100 + 75 * sin(2 * pi * (1:365) / 365 + pi/2) + rnorm(365, 0, 10))
pool_attendance <- scales::rescale(pool_attendance*-1,c(0.01,0.06))
# Generate ice cream consumption based on pool attendance + noise
ice_cream <- round(pool_attendance * 1.5 + 50 * sin(2 * pi * (1:365) / 365 + pi/2) + rnorm(365, 0, 20))
ice_cream <- scales::rescale(ice_cream*-1,c(0.01,0.04))
data <- data.frame(Date = dates, Pool_Attendance = pool_attendance, Ice_Cream_Consumption = ice_cream)
# Plot consumptions on y and date on x
ggplot(data, aes(x = Date)) +
geom_line(aes(y = Pool_Attendance, color = "Pool Attendance")) +
geom_line(aes(y = Ice_Cream_Consumption, color = "Ice Cream Consumption")) +
labs(title = "Pool Attendance and Ice Cream Consumption (% in population) over Time",
y = "% in population", x = "Date", color = "Legend") +
theme_minimal()
# plot pool attendance as function of consumption of ice cream
ggplot(data,aes(x=Ice_Cream_Consumption,y=Pool_Attendance)) +
geom_point() + geom_smooth(method="lm")
# plot the reverse
ggplot(data,aes(x=Pool_Attendance,y=Ice_Cream_Consumption)) +
geom_point() + geom_smooth(method="lm")
data
data <- tibble(Date = dates, Pool_Attendance = pool_attendance, Ice_Cream_Consumption = ice_cream)
data
data <- tibble(Date = dates, Pool_Attendance = pool_attendance, Ice_Cream_Consumption = ice_cream)
# Plot consumptions on y and date on x
ggplot(data, aes(x = Date)) +
geom_line(aes(y = Pool_Attendance, color = "Pool Attendance")) +
geom_line(aes(y = Ice_Cream_Consumption, color = "Ice Cream Consumption")) +
labs(title = "Pool Attendance and Ice Cream Consumption (% in population) over Time",
y = "% in population", x = "Date", color = "Legend") +
theme_minimal()
# plot pool attendance as function of consumption of ice cream
ggplot(data,aes(x=Ice_Cream_Consumption,y=Pool_Attendance)) +
geom_point() + geom_smooth(method="lm")
# plot the reverse
ggplot(data,aes(x=Pool_Attendance,y=Ice_Cream_Consumption)) +
geom_point() + geom_smooth(method="lm")
data
lm(Pool_Attendance~Ice_Cream_Consumption,data)
summary(lm(Pool_Attendance~Ice_Cream_Consumption,data))
data$Date
lubridate::ymd(data$Date)
lubridate::month(data$Date)
summary(lm(Pool_Attendance~Ice_Cream_Consumption+as_factor(lubridate::month(data$Date)),data))
